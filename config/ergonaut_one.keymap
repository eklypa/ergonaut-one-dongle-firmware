#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Brackets1 {
            bindings = <&brackets1>;
            key-positions = <22 21>;
            layers = <1>;
        };

        Brackets2 {
            bindings = <&brackets2>;
            key-positions = <31 32>;
            layers = <1>;
        };

        Brackets3 {
            bindings = <&brackets3>;
            key-positions = <33 34>;
            layers = <1>;
        };
    };

    macros {
        brackets1: brackets1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "BRACKETS1";
        };

        brackets2: brackets2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACKETS2";
        };

        brackets3: brackets3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETS3";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_ALT GRAVE  &kp Q  &kp W  &kp E         &kp R            &kp T         &kp Y            &kp U                 &kp I         &kp O    &kp P     &kp LBKT
&mt LEFT_WIN TAB    &kp A  &kp S  &kp D         &kp F            &kp G         &kp H            &kp J                 &kp K         &kp L    &kp SEMI  &kp APOSTROPHE
&mt LCTRL RBKT      &kp Z  &kp X  &kp C         &kp V            &kp B         &kp N            &kp M                 &kp COMMA     &kp DOT  &kp FSLH  &kp BACKSLASH
                                  &lt 2 ESCAPE  &mt LSHFT SPACE  &lt 1 RETURN  &lt 1 LG(SPACE)  &mt RSHIFT BACKSPACE  &lt 2 DELETE
            >;
        };

        lower_layer {
            bindings = <
&kp LEFT_ALT  &kp F9  &kp F10  &kp F11  &kp F12  &kp LG(LS(S))  &kp EXCLAMATION  &kp AT_SIGN     &kp POUND        &kp DOLLAR            &kp PERCENT            &kp PLUS
&trans        &kp F5  &kp F6   &kp F7   &kp F8   &none          &kp CARET        &kp AMPERSAND   &kp ASTRK        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS
&kp LCTRL     &kp F1  &kp F2   &kp F3   &kp F4   &none          &kp UNDERSCORE   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LBKT              &kp RBKT               &kp EQUAL
                               &trans   &trans   &trans         &trans           &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&kp LEFT_ALT  &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp KP_MINUS  &kp INSERT  &kp HOME      &kp PAGE_DOWN  &kp PAGE_UP       &kp END        &kp C_PLAY_PAUSE
&trans        &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp KP_PLUS   &none       &kp LEFT      &kp DOWN       &kp UP            &kp RIGHT      &kp C_VOLUME_UP
&kp LCTRL     &kp N0           &kp N1  &kp N2  &kp N3  &kp KP_DOT    &none       &kp LC(LEFT)  &kp LC(DOWN)   &kp LC(UP_ARROW)  &kp LC(RIGHT)  &kp C_VOLUME_DOWN
                                       &trans  &trans  &trans        &trans      &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none  &none  &none   &none  &none   &none  &none   &none   &none  &none  &bootloader
&bt BT_CLR   &none  &none  &none   &none  &none   &none  &none   &none   &none  &none  &bt BT_CLR
&sys_reset   &none  &none  &none   &none  &none   &none  &none   &none   &none  &none  &sys_reset
                           &trans  &none  &trans  &none  &trans  &trans
            >;
        };
    };
};
